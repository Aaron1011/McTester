import org.gradle.plugins.ide.idea.model.IdeaModel

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "gradle.plugin.org.spongepowered:spongegradle:0.8.1"
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.16'
    id 'maven'
    id "org.sonarqube" version "2.6.2"
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
}

buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }


apply plugin: 'groovy'
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.plugin"
apply plugin: 'idea'
apply plugin: "maven"



version = modVersion
group = modGroup
archivesBaseName = modBaseName

minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion // Must be the same as SpongeForge
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replaceIn "McTesterGradlePlugin.groovy"
    replace '@@MCTESTER_VERSION@@', "${project.group}:${project.archivesBaseName}:${project.version}"
}

def addGradleStart() {
    project.logger.warn("Hacking forgegradle stuff")

    def javaConv = (JavaPluginConvention) project.getConvention().getPlugins().get("java")



    def main = javaConv.getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME)
    def test = javaConv.getSourceSets().getByName(SourceSet.TEST_SOURCE_SET_NAME)

    main.setCompileClasspath(main.getCompileClasspath()
                                     .plus(project.getConfigurations().getByName("forgeGradleGradleStart"))

    )
    test.setCompileClasspath(test.getCompileClasspath()
                                     .plus(project.getConfigurations().getByName("forgeGradleGradleStart"))
    )
    test.setRuntimeClasspath(test.getRuntimeClasspath()
                                     .plus(project.getConfigurations().getByName("forgeGradleGradleStart"))
    )

    def ideaConv= (IdeaModel) project.getExtensions().getByName("idea")
    ideaConv.getModule().getScopes().get("COMPILE").get("plus").add(project.getConfigurations().getByName("forgeGradleGradleStart"));
}

addGradleStart()

repositories {
    mavenCentral()

    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.spongepowered:spongeapi:7.2.0-SNAPSHOT'
    compile 'com.github.Aaron1011:Mixin:deobf-SNAPSHOT'
    //compile 'org.spongepowered:mixin:0.7.11-SNAPSHOT'

    testCompile 'junit:junit:4.12'
    compile 'junit:junit:4.12'

    compile 'com.google.guava:guava:21.0'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.0"
    compile "org.jetbrains.kotlin:kotlin-reflect:1.3.0"

}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}

configurations {
    compile.extendsFrom kapt
}
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    systemProperties System.properties
}

sonarqube {
    properties {
        property "sonar.projectName", "McTester"
        property "sonar.organization", "aaron1011-github"
        property "sonar.host.url", "https://sonarcloud.io"
    }
 }

// Supresses warnings about using Unsafe
// https://discuss.gradle.org/t/gradle-2-10-cant-suppress-java-1-8-compiler-warnings/13921/5
compileJava {
  options.compilerArgs << '-XDignore.symbol.file'
  options.fork = true 
  options.forkOptions.executable = 'javac'
}

if(project.hasProperty('spongeRepo') && project.hasProperty('spongeUsername') && project.hasProperty('spongePassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        repository(url: spongeRepo) {
          authentication(userName: spongeUsername, password: spongePassword)
        }

        snapshotRepository(url: spongeRepo) {
          authentication(userName: spongeUsername, password: spongePassword)
        }

        pom.project {
          description 'An integration testing framework for Minecraft'
          name project.name
          url 'https://github.com/SpongePowered/McTester/'

          inceptionYear '2018'

          developers {
            developer {
              name 'Aaron1011'
              email 'aa1ronham@gmail.com'
            }
          }

          issueManagement {
            system 'GitHub Issues'
            url 'https://github.com/SpongePowered/McTester/issues'
          }

          licenses {
            license {
              name 'MIT'
              url 'https://opensource.org/licenses/mit'
            }
          }

          scm {
            connection 'scm:git@github.com:SpongePowered/McTester.git'
            developerConnection 'scm:git@github.com:SpongePowered/McTester.git'
            url 'https://github.com/SpongePowered/McTester/'
          }
        }
      }
    }
  }
}
